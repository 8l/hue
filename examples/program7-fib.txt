x = if (N) 10; if N > 4 20; else N

fib = func (N Int) Int: if N < 2 N; else (fib n-1) + fib n-2

#x = ? (N < 10):
#      a = 5
#      a * 5
#    (N < 20): 2
#    (N < 30): 3
#    :N
#
#x = ? (N < 10): 5 * 5; (N < 20): 2; (N < 30): 3; : N

# x = if (N < 10): 5 * 5; if (N < 20): 2; if (N < 30): 3; else: N
# 
# x = func (N Int) Int:
#   if (N < 10): 5 * 5
#     if (N < 20): 2
#     else: 4
#   if (N < 30): 3
#   else: N

# IfExpression  = TestExpr+ BlockExpression
# TestExpr      = '?' Expression ':' BlockExpression
#
# Examples  (=> solutions):
#
#  ? (N < 1): 1; (N < 10): 2; N  => N(IntMin..0) == 1
#                                => N(1..9) == 2
#                                => N(10..) == N
#
#  ? (N < 1): 1; 3               => N(IntMin..0) == 1
#                                => N(1..) == 3
#


#x = ? (N < 10): 1
#      (N < 20): 2
#      N

#x = ? (N < 10): 1; N
#
#bestN = func (N Int) Int:
#  if (N < 10):
#    x = 56
#    fooBar x N
#  (N < 20):
#    x = 56
#    fooBar x N
#  (N < 30):
#    x = 56
#    fooBar x N
#  (N < 40): 2
#  : N
#
#bestN = func (N Int) Int:
#  ? (N < 10):
#    f = fooBar x N
#    ? (f == 5): f * 76
#              : f
#  ? (N < xofr 6):
#      2
#  ?: N
#
#
#fib = func (N Int) Int:
#  x = ? (N < 2) N
#    (fib n-1) + fib n-2
#  x * 7
#
#bestN = func (N Int) Int ->
#  ? (N < 10) fooBar x N
#    (N < 20) 2
#    N
#
#bestN = func (N Int) Int -> ? (N < 10) fooBar x N; (N < 20) 2; N
#
#x = func (x Float) -> x = 65
#
#x = ? (N < 10) 1 : 3

# Recursive fibonacci
#fib = func (N Int) Int -> ?(N < 2) N : (fib n-1) + fib n-2

