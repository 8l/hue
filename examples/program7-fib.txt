# IfExpression  = TestExpr+ ':' Expression
# TestExpr      = '?' Expression Expression
#
# Examples  (=> solutions):
#
#  ?(N < 1) 1 ?(N < 10) 2 : 3  => N(IntMin..0) == 1
#                              => N(1..9) == 2
#                              => N(10..) == 3
#
#  ?(N < 1) 1 : 3              => N(IntMin..0) == 1
#                              => N(1..) == 3
#
# TODO: Support blocks:
#
#  ?(N < 1)
#     5 * 7 / someFunc N 3
#  ?(N < 2)
#     tmp = anotherFunc N 3
#     45 * thirdFunc tmp
#  :
#     someFunc N 2
#  
#
x = ? (N < 10): 1; ?(N < 20): 2 ?: 3


x = if (N < 10) -> 1,
       (N < 20) -> 2,
                -> N

bestN = func (N Int) Int:
  if (N < 10):
    x = 56
    fooBar x N
  (N < 20):
    x = 56
    fooBar x N
  (N < 30):
    x = 56
    fooBar x N
  (N < 40): 2
  : N

bestN = func (N Int) Int:
  ? (N < 10):
    f = fooBar x N
    ? (f == 5): f * 76
              : f
  ? (N < xofr 6):
      2
  ?: N


fib = func (N Int) Int:
  x = ? (N < 2) N
    (fib n-1) + fib n-2
  x * 7

bestN = func (N Int) Int ->
  ? (N < 10) fooBar x N
    (N < 20) 2
    N

bestN = func (N Int) Int -> ? (N < 10) fooBar x N; (N < 20) 2; N

x = func (x Float) -> x = 65

x = ? (N < 10) 1 : 3

# Recursive fibonacci
#fib = func (N Int) Int -> ?(N < 2) N : (fib n-1) + fib n-2

