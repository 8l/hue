## x86_64 assembler generated by llc -asm-verbose from the following program:
##
##   Write = extern cove_stdout_write (data [Byte])
##   Data = 'Hello World\n'
##   Write Data
##
## Executable
	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.align	4, 0x90             

## Our main() function
_main:
	pushq	%rax                  ## Push a 64-bit register to the stack
	leaq	L_ai8s(%rip), %rdi    ## Load effective address of ai8s (our [Byte] object) to register %rdi
	                            ##   %rip = Instruction Pointer
	                            ##   %rdi = First argument to upcoming func call

	callq	_cove_stdout_write    ## Push the current address to the stack and call cove_stdout_write()
	xorl	%eax, %eax            ## Set the return value to 0
	popq	%rdx                  ## Pop the return value into %rdx
	ret                         ## Return from main()

## Constant data
	.section	__TEXT,__const
L_ai8s:                       ## This is our [Byte] constant. Cove generated a struct:
	.quad	12                    ##   i64 length
	.ascii	 "Hello World\n"    ##   i8 x <length> bytes

.subsections_via_symbols
